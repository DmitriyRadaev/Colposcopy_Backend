# Generated by Django 4.2.24 on 2025-09-21 12:42

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('diagnosis', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='Layer1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layer_img', models.ImageField(upload_to='images/')),
                ('layer_description', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='Layer2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layer_img', models.ImageField(upload_to='images/')),
                ('layer_description', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='Layer3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layer_img', models.ImageField(upload_to='images/')),
                ('layer_description', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='Layer4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layer_img', models.ImageField(upload_to='images/')),
                ('book_img', models.ImageField(upload_to='images/')),
            ],
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='UniversityAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.CharField(max_length=120)),
                ('university', models.CharField(max_length=120)),
                ('is_active', models.BooleanField(default=True)),
                ('date_start', models.DateField(auto_now_add=True)),
                ('date_end', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=120)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.case')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surname', models.CharField(max_length=120)),
                ('name', models.CharField(max_length=120)),
                ('middle_name', models.CharField(max_length=120)),
                ('birth_date', models.DateField()),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('university_admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.universityadmin')),
            ],
        ),
        migrations.AddField(
            model_name='case',
            name='layer1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.layer1'),
        ),
        migrations.AddField(
            model_name='case',
            name='layer2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.layer2'),
        ),
        migrations.AddField(
            model_name='case',
            name='layer3',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.layer3'),
        ),
        migrations.AddField(
            model_name='case',
            name='layer4',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.layer4'),
        ),
        migrations.AddField(
            model_name='case',
            name='parameters',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.parameter'),
        ),
        migrations.AddField(
            model_name='case',
            name='recommendations',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.recommendation'),
        ),
        migrations.CreateModel(
            name='Attempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(auto_now_add=True)),
                ('end_time', models.TimeField()),
                ('mark', models.IntegerField()),
                ('status', models.CharField(max_length=120)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.student')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=120)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('admin_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.universityadmin')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
